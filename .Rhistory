return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
df[i,2] <- paste(df[i,2],paste("_TRANSPORTER",i,sep = ""),sep = "")
df[counterpart,1] <- paste(df[counterpart,1],paste("_TRANSPORTER",i,sep = ""),sep = "")
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
View(new_df)
new_df <- as.data.frame(do.call(rbind,new_df))
View(new_df)
new_df_list <- sapply(enzyme_reacs, function(enzyme_reac_reverse, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac | recon3D_bigg_no_cofactor$target == enzyme_reac),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
transporter <- gsub("_reverse","",df[i,2])
transporter <- paste(transporter,paste(paste("_TRANSPORTER",i,sep = ""), "_reverse",sep = ""),sep = "")
df[i,2] <- transporter
df[counterpart,1] <- transporter
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
warnings()
new_df_list <- sapply(enzyme_reacs, function(enzyme_reac_reverse, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac_reverse | recon3D_bigg_no_cofactor$target == enzyme_reac_reverse),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
transporter <- gsub("_reverse","",df[i,2])
transporter <- paste(transporter,paste(paste("_TRANSPORTER",i,sep = ""), "_reverse",sep = ""),sep = "")
df[i,2] <- transporter
df[counterpart,1] <- transporter
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df_reverse <- as.data.frame(do.call(rbind,new_df_list))
View(new_df_reverse)
enzyme_reacs <- unique(c(recon3D_bigg_no_cofactor$source, recon3D_bigg_no_cofactor$target))
enzyme_reacs <- enzyme_reacs[grepl("^Gene",enzyme_reacs)]
enzyme_reacs_reverse <- enzyme_reacs[grepl("_reverse",enzyme_reacs)]
enzyme_reacs <- enzyme_reacs[!grepl("_reverse",enzyme_reacs)]
new_df_list <- sapply(enzyme_reacs, function(enzyme_reac, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac | recon3D_bigg_no_cofactor$target == enzyme_reac),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
df[i,2] <- paste(df[i,2],paste("_TRANSPORTER",i,sep = ""),sep = "")
df[counterpart,1] <- paste(df[counterpart,1],paste("_TRANSPORTER",i,sep = ""),sep = "")
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df <- as.data.frame(do.call(rbind,new_df_list))
new_df_list <- sapply(enzyme_reacs_reverse, function(enzyme_reac_reverse, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac_reverse | recon3D_bigg_no_cofactor$target == enzyme_reac_reverse),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
transporter <- gsub("_reverse","",df[i,2])
transporter <- paste(transporter,paste(paste("_TRANSPORTER",i,sep = ""), "_reverse",sep = ""),sep = "")
df[i,2] <- transporter
df[counterpart,1] <- transporter
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df_reverse <- as.data.frame(do.call(rbind,new_df_list))
View(new_df)
View(new_df_reverse)
recon3D_bigg_no_cofactor <- as.data.frame(rbind(new_df, new_df_reverse))
recon3D_bigg_no_cofactor <- as.data.frame(read_csv("data/recon3D_bigg_no_cofactor.csv"))
recon3D_bigg_no_cofactor <- as.data.frame(rbind(new_df, new_df_reverse))
recon3D_bigg_no_cofactor <- recon3D_bigg_no_cofactor[complete.cases(recon3D_bigg_no_cofactor),]
###Build the connectors to omnipath
elements <- unique(as.character(unlist(recon3D_bigg_no_cofactor)))
elements <- elements[!grepl("Metab__",elements)]
elements <- elements[!grepl("__[0-9]",elements)]
connectors_list <- sapply(elements, function(x){
# prefixe <- gsub("__.*","",x)
# suffixe <- ifelse(grepl("_reverse$",x),"_reverse","")
genes <- gsub(".*__","",x)
genes <- gsub("_TRANSPORTER[0-9]+","",x)
genes <- gsub("_reverse$","",genes)
if(grepl("_",genes))
{
elements <- str_split(string = genes, pattern = "_")[[1]]
if(length(elements) < 10)
{
genes_connector_list <- sapply(elements,function(gene)
{
return(c(gene,x))
})
return(t(genes_connector_list))
}
} else
{
return(c(genes,x))
}
})
connectors_df <- as.data.frame(do.call(rbind,connectors_list))
names(connectors_df) <- c("source","target")
View(connectors_df)
elements
###Build the connectors to omnipath
elements <- unique(as.character(unlist(recon3D_bigg_no_cofactor)))
elements <- elements[!grepl("Metab__",elements)]
elements
elements <- elements[!grepl("__[0-9]",elements)]
connectors_list <- sapply(elements, function(x){
# prefixe <- gsub("__.*","",x)
# suffixe <- ifelse(grepl("_reverse$",x),"_reverse","")
genes <- gsub(".*__","",x)
genes <- gsub("_TRANSPORTER[0-9]+","",x)
genes <- gsub("_reverse$","",genes)
print(genes)
if(grepl("_",genes))
{
elements <- str_split(string = genes, pattern = "_")[[1]]
if(length(elements) < 10)
{
genes_connector_list <- sapply(elements,function(gene)
{
return(c(gene,x))
})
return(t(genes_connector_list))
}
} else
{
return(c(genes,x))
}
})
connectors_list <- sapply(elements, function(x){
# prefixe <- gsub("__.*","",x)
# suffixe <- ifelse(grepl("_reverse$",x),"_reverse","")
genes <- gsub(".*__","",x)
genes <- gsub("_TRANSPORTER[0-9]+","",genes)
genes <- gsub("_reverse$","",genes)
print(genes)
if(grepl("_",genes))
{
elements <- str_split(string = genes, pattern = "_")[[1]]
if(length(elements) < 10)
{
genes_connector_list <- sapply(elements,function(gene)
{
return(c(gene,x))
})
return(t(genes_connector_list))
}
} else
{
return(c(genes,x))
}
})
connectors_df <- as.data.frame(do.call(rbind,connectors_list))
names(connectors_df) <- c("source","target")
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
connectors_df <- connectors_df[which(connectors_df$source %in% clean_omnipath_PKN$source | connectors_df$source %in% clean_omnipath_PKN$target),]
recon3D_connected <- as.data.frame(rbind(recon3D_bigg_no_cofactor,connectors_df))
View(recon3D_connected)
write_csv(recon3D_connected, file = "results/recon3D_connected.csv")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
save(meta_PKN, file = "results/meta_PKN.RData")
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
comp <- "_c"
metab_input_COSMOS_vec <- metab_input_COSMOS_vec[grepl(comp,names(metab_input_COSMOS_vec))]
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 3,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
my_options$timelimit <- 7200
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
View(test_result_for$weightedSIF) # There are SLCs that are not good
SIF <- as.data.frame(test_result_for$weightedSIF)
library(metaboliteIDmapping)
ATT <- as.data.frame(test_result_for$nodesAttributes)
View(ATT)
names(metabolitesMapping)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
View(HMDB_mapper)
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
View(SIF)
library(stringr)
for(i in 1:2)
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
suffixe <- str_extract("_[a-z]$",x)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
}
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
View(SIF)
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in 1:2)
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
suffixe <- str_extract("_[a-z]$",x)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
names(HMDB_mapper_vec)
"HMDB0001546" %in% names(HMDB_mapper_vec)
HMDB_mapper_vec
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in 1:2)
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
suffixe <- str_extract("_[a-z]$",x)
x <- gsub("_[a-z]$","",x)
print(x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in c(1,3))
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
suffixe <- str_extract("_[a-z]$",x)
x <- gsub("_[a-z]$","",x)
print(x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in c(1,3))
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
suffixe <- str_extract("_[a-z]$",x)
print(suffixe)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in c(1,3))
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
suffixe <- str_extract(x,"_[a-z]$")
print(suffixe)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in c(1,3))
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
x <- gsub("^Gene","Enzyme",x)
suffixe <- str_extract(x,"_[a-z]$")
print(suffixe)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
ATT[,1] <- sapply(ATT[,1], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
x <- gsub("^Gene","Enzyme",x)
suffixe <- str_extract(x,"_[a-z]$")
print(suffixe)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
write_csv(ATT, file = "results/test/ATT_forward.csv")
write_csv(SIF, file = "results/test/SIF_forward.csv")
View(meta_PKN)
SIF <- as.data.frame(test_result_for$weightedSIF)
ATT <- as.data.frame(test_result_for$nodesAttributes)
HMDB_mapper <- as.data.frame(metabolitesMapping[,c("Name","HMDB")])
HMDB_mapper <- HMDB_mapper[complete.cases(HMDB_mapper),]
HMDB_mapper_vec <- HMDB_mapper$Name
names(HMDB_mapper_vec) <- HMDB_mapper$HMDB
for(i in c(1,3))
{
SIF[,i] <- sapply(SIF[,i], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
x <- gsub("^Gene","Enzyme",x)
suffixe <- str_extract(x,"_[a-z]$")
print(suffixe)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",paste(x,suffixe,sep = ""),sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
}
ATT[,1] <- sapply(ATT[,1], function(x, HMDB_mapper_vec){
x <- gsub("Metab__","",x)
x <- gsub("^Gene","Enzyme",x)
suffixe <- str_extract(x,"_[a-z]$")
print(suffixe)
x <- gsub("_[a-z]$","",x)
if(x %in% names(HMDB_mapper_vec))
{
x <- HMDB_mapper_vec[x]
x <- paste("Metab__",x,sep = "")
}
if(!is.na(suffixe))
{
x <- paste(x,suffixe,sep = "")
}
return(x)
},HMDB_mapper_vec = HMDB_mapper_vec)
write_csv(SIF, file = "results/test/SIF_forward.csv")
write_csv(ATT, file = "results/test/ATT_forward.csv")
