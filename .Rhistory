metab <- paste(HMDB_full_mapping_long_vec[metab],suffixe,sep = "")
return(metab)
}
return(x)
}, HMDB_full_mapping_long_vec = HMDB_full_mapping_long_vec)
}
###
enzyme_reacs <- unique(c(recon3D_bigg_no_cofactor$source, recon3D_bigg_no_cofactor$target))
enzyme_reacs <- enzyme_reacs[grepl("^Gene",enzyme_reacs)]
enzyme_reacs_reverse <- enzyme_reacs[grepl("_reverse",enzyme_reacs)]
enzyme_reacs <- enzyme_reacs[!grepl("_reverse",enzyme_reacs)]
new_df_list <- sapply(enzyme_reacs, function(enzyme_reac, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac | recon3D_bigg_no_cofactor$target == enzyme_reac),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
df[i,2] <- paste(df[i,2],paste("_TRANSPORTER",i,sep = ""),sep = "")
df[counterpart,1] <- paste(df[counterpart,1],paste("_TRANSPORTER",i,sep = ""),sep = "")
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df <- as.data.frame(do.call(rbind,new_df_list))
new_df_list <- sapply(enzyme_reacs_reverse, function(enzyme_reac_reverse, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac_reverse | recon3D_bigg_no_cofactor$target == enzyme_reac_reverse),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
transporter <- gsub("_reverse","",df[i,2])
transporter <- paste(transporter,paste(paste("_TRANSPORTER",i,sep = ""), "_reverse",sep = ""),sep = "")
df[i,2] <- transporter
df[counterpart,1] <- transporter
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df_reverse <- as.data.frame(do.call(rbind,new_df_list))
recon3D_bigg_no_cofactor <- as.data.frame(rbind(new_df, new_df_reverse))
recon3D_bigg_no_cofactor <- recon3D_bigg_no_cofactor[complete.cases(recon3D_bigg_no_cofactor),]
###Build the connectors to omnipath
elements <- unique(as.character(unlist(recon3D_bigg_no_cofactor)))
elements <- elements[!grepl("Metab__",elements)]
elements <- elements[!grepl("__[0-9]",elements)]
connectors_list <- sapply(elements, function(x){
# prefixe <- gsub("__.*","",x)
# suffixe <- ifelse(grepl("_reverse$",x),"_reverse","")
genes <- gsub(".*__","",x)
genes <- gsub("_TRANSPORTER[0-9]+","",genes)
genes <- gsub("_reverse$","",genes)
print(genes)
if(grepl("_",genes))
{
elements <- str_split(string = genes, pattern = "_")[[1]]
if(length(elements) < 10)
{
genes_connector_list <- sapply(elements,function(gene)
{
return(c(gene,x))
})
return(t(genes_connector_list))
}
} else
{
return(c(genes,x))
}
})
connectors_df <- as.data.frame(do.call(rbind,connectors_list))
names(connectors_df) <- c("source","target")
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
connectors_df <- connectors_df[which(connectors_df$source %in% clean_omnipath_PKN$source | connectors_df$source %in% clean_omnipath_PKN$target),]
recon3D_connected <- as.data.frame(rbind(recon3D_bigg_no_cofactor,connectors_df))
write_csv(recon3D_connected, file = "results/recon3D_connected.csv")
library(readr)
library(metaboliteIDmapping)
### Import the high confidence interactions of STITCH
STITCH <- as.data.frame(read_delim("data/9606.actions.v5.0.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
STITCH <- STITCH[STITCH$mode == "activation" | STITCH$mode == "inhibition",]
####THIS SECTION TO REMOVE TEXTMINING, download this file from STITCHdb website
X9606_protein_chemical_links_detailed_v5_0 <- as.data.frame(read_delim("data/9606.protein_chemical.links.detailed.v5.0.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
threshold <- 700
not_text_mining <- X9606_protein_chemical_links_detailed_v5_0[X9606_protein_chemical_links_detailed_v5_0$combined_score >= threshold,]
rm(X9606_protein_chemical_links_detailed_v5_0)
not_text_mining <- not_text_mining[not_text_mining$experimental >= threshold | not_text_mining$database >= threshold,]
not_text_mining$ID <- paste(not_text_mining$chemical, not_text_mining$protein , sep = "_")
not_text_mining$ID_reverse <- paste(not_text_mining$protein, not_text_mining$chemical, sep = "_")
### We only care about allosteric interactions
STITCH <- STITCH[STITCH$a_is_acting,]
STITCH$ID <- paste(STITCH$item_id_a, STITCH$item_id_b, sep = "_")
STITCH <- STITCH[STITCH$ID %in% not_text_mining$ID | STITCH$ID %in% not_text_mining$ID_reverse,]
STITCH <- STITCH[,-7]
####END OF REMOVE TEXTMINING
### We need to map the Ensembl Ids to NCBI gene ids
## We make a vector of uniue ensembl IDs
prots <- unique(c(STITCH$item_id_a, STITCH$item_id_b))
prots <- prots[grepl("9606[.]ENSP", prots)]
## We remove the taxon ID so the IDs can be mapped
prots <- as.data.frame(cbind(prots, gsub("9606[.]","",prots)))
##We use biomart package to map the ensembl ids to NCBI ones
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "ensembl_peptide_id",
attributes = c("ensembl_peptide_id",'hgnc_symbol','entrezgene_id', "description"),
values = prots$V2, mart = ensembl)
names(G_list)[1] <- "V2"
## We put all the ID versions into one dataframe
prots <- merge(prots, G_list, by = "V2")
prots <- prots[prots$hgnc_symbol != "",]
## We create a named vector to make the id conversion more efficient
prots_vec <- prots$hgnc_symbol
names(prots_vec) <- prots$prots
## Ids are converted in the STITCH interaciton dataframe
for(i in 1:2)
{
for(j in 1:length(STITCH[,1]))
{
if(STITCH[j,i] %in% names(prots_vec))
{
STITCH[j,i] <- prots_vec[STITCH[j,i]]
}
else
{
STITCH[j,i] <- gsub("CID[a-z]0*","Metab__",STITCH[j,i])
}
}
}
### We converted the interactions of STITCH into a SIF format
STITCH$sign <- ifelse(STITCH$action == "inhibition", -1, 1)
STITCH <- STITCH[grepl("Metab__",STITCH$item_id_a),]
STITCH <- STITCH[,c(1,7,2)]
names(STITCH) <- c("source","sign","target")
CIDs <- unique(as.character(unlist(STITCH[,c(1,3)])))
CIDs <- CIDs[grepl("Metab__",CIDs)]
CIDs <- gsub("Metab__","",CIDs)
##Convert CID to HMDB Id when available
metabolitesMapping <- metabolitesMapping[which(metabolitesMapping$CID %in% CIDs),]
metabolitesMapping <- metabolitesMapping[!is.na(metabolitesMapping$HMDB),]
metabolitesMapping_vec <- paste("Metab__",metabolitesMapping$HMDB, sep = "")
names(metabolitesMapping_vec) <- paste("Metab__",metabolitesMapping$CID, sep ="")
for(i in c(1,3))
{
STITCH[,i] <- sapply(STITCH[,i], function(x, metabolitesMapping_vec)
{
if(x %in% names(metabolitesMapping_vec))
{
return(metabolitesMapping_vec[x])
} else
{
return(x)
}
}, simplify = T, metabolitesMapping_vec = metabolitesMapping_vec)
}
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
omni_proteins <- unique(as.character(unlist(clean_omnipath_PKN[,c(1,2)])))
STITCH <- STITCH[which(STITCH$target %in% omni_proteins),]
STITCH <- unique(STITCH)
STITCH$source <- paste(STITCH$source, "_c", sep = "")
STITCH <- STITCH[,c(1,3,2)]
### Save the SIF network as csv
write_csv(STITCH,"results/STITCH_filtered.csv")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
meta_PKN <- unique(meta_PKN)
save(meta_PKN, file = "results/meta_PKN.RData")
meta_network <- meta_PKN
meta_network <- meta_network[,c(1,3,2)]
names(meta_network) <- c("source", "interaction", "target")
# save(meta_PKN, file = "../cosmosR/data/meta_network.RData")
View(meta_network)
View(meta_network)
View(meta_network)
library(OmnipathR)
library(org.Hs.eg.db)
library(readr)
full_pkn <- as.data.frame(import_all_interactions())
library(OmnipathR)
library(org.Hs.eg.db)
library(readr)
full_pkn <- as.data.frame(import_all_interactions())
full_pkn <- full_pkn[-which(full_pkn$sources == "Wang"),] #Wang ressource looks quite problematic
clean_PKN <- full_pkn[full_pkn$consensus_stimulation == 1 | full_pkn$consensus_inhibition == 1,]
clean_PKN <- clean_PKN[clean_PKN$dorothea_level %in% c("A","A;B","A;C","A;D","B","B;D","C","C;D") | is.na(clean_PKN$dorothea_level),]
clean_PKN$sign <- clean_PKN$consensus_stimulation - clean_PKN$consensus_inhibition
clean_PKN <- clean_PKN[,c(3,4,18)]
clean_PKN_supp <- clean_PKN[clean_PKN$sign == 0,]
clean_PKN_supp$sign <- -1
clean_PKN[clean_PKN$sign == 0,"sign"] <- 1
clean_PKN <- as.data.frame(rbind(clean_PKN, clean_PKN_supp))
names(clean_PKN) <- c("source","target","sign")
write_csv(x = clean_PKN, file = "results/clean_omnipath_PKN.csv")
library(readr)
library(stringr)
recon3D_bigg_no_cofactor <- as.data.frame(read_csv("data/recon3D_bigg_no_cofactor.csv"))
HMDB_full_mapping_long <- as.data.frame(
read_csv("support/HMDB_full_mapping_long.csv"))
HMDB_full_mapping_long_vec <- paste("Metab__",HMDB_full_mapping_long$good_HMDB_id,sep = "")
names(HMDB_full_mapping_long_vec) <- paste("Metab__",HMDB_full_mapping_long$legacy_HMDB_id,sep = "")
HMDB_full_mapping_long_vec <- c(HMDB_full_mapping_long_vec,"Metab__HC00342" = "Metab__HMDB0000072")
for(i in 1:2)
{
recon3D_bigg_no_cofactor[,i] <- sapply(recon3D_bigg_no_cofactor[,i], function(x,HMDB_full_mapping_long_vec){
suffixe <- str_extract(x, "_[a-z]$")
metab <- gsub("_[a-z]$","",x)
if(metab %in% names(HMDB_full_mapping_long_vec))
{
metab <- paste(HMDB_full_mapping_long_vec[metab],suffixe,sep = "")
return(metab)
}
return(x)
}, HMDB_full_mapping_long_vec = HMDB_full_mapping_long_vec)
}
###
enzyme_reacs <- unique(c(recon3D_bigg_no_cofactor$source, recon3D_bigg_no_cofactor$target))
enzyme_reacs <- enzyme_reacs[grepl("^Gene",enzyme_reacs)]
enzyme_reacs_reverse <- enzyme_reacs[grepl("_reverse",enzyme_reacs)]
enzyme_reacs <- enzyme_reacs[!grepl("_reverse",enzyme_reacs)]
new_df_list <- sapply(enzyme_reacs, function(enzyme_reac, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac | recon3D_bigg_no_cofactor$target == enzyme_reac),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
df[i,2] <- paste(df[i,2],paste("_TRANSPORTER",i,sep = ""),sep = "")
df[counterpart,1] <- paste(df[counterpart,1],paste("_TRANSPORTER",i,sep = ""),sep = "")
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df <- as.data.frame(do.call(rbind,new_df_list))
new_df_list <- sapply(enzyme_reacs_reverse, function(enzyme_reac_reverse, recon3D_bigg_no_cofactor){
df <- recon3D_bigg_no_cofactor[which(recon3D_bigg_no_cofactor$source == enzyme_reac_reverse | recon3D_bigg_no_cofactor$target == enzyme_reac_reverse),]
if(dim(df)[1] < 2)
{
return(NA)
} else
{
if(dim(df)[1] < 3)
{
return(df)
} else
{
for(i in 1:dim(df)[1])
{
if(grepl("Metab__",df[i,1]))
{
counterpart <- which(gsub("_[a-z]$","",df[,2]) == gsub("_[a-z]$","",df[i,1]))
if(length(counterpart) > 0)
{
transporter <- gsub("_reverse","",df[i,2])
transporter <- paste(transporter,paste(paste("_TRANSPORTER",i,sep = ""), "_reverse",sep = ""),sep = "")
df[i,2] <- transporter
df[counterpart,1] <- transporter
}
}
}
return(df)
}
}
}, recon3D_bigg_no_cofactor = recon3D_bigg_no_cofactor)
new_df_reverse <- as.data.frame(do.call(rbind,new_df_list))
recon3D_bigg_no_cofactor <- as.data.frame(rbind(new_df, new_df_reverse))
recon3D_bigg_no_cofactor <- recon3D_bigg_no_cofactor[complete.cases(recon3D_bigg_no_cofactor),]
###Build the connectors to omnipath
elements <- unique(as.character(unlist(recon3D_bigg_no_cofactor)))
elements <- elements[!grepl("Metab__",elements)]
elements <- elements[!grepl("__[0-9]",elements)]
connectors_list <- sapply(elements, function(x){
# prefixe <- gsub("__.*","",x)
# suffixe <- ifelse(grepl("_reverse$",x),"_reverse","")
genes <- gsub(".*__","",x)
genes <- gsub("_TRANSPORTER[0-9]+","",genes)
genes <- gsub("_reverse$","",genes)
print(genes)
if(grepl("_",genes))
{
elements <- str_split(string = genes, pattern = "_")[[1]]
if(length(elements) < 10)
{
genes_connector_list <- sapply(elements,function(gene)
{
return(c(gene,x))
})
return(t(genes_connector_list))
}
} else
{
return(c(genes,x))
}
})
connectors_df <- as.data.frame(do.call(rbind,connectors_list))
names(connectors_df) <- c("source","target")
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
connectors_df <- connectors_df[which(connectors_df$source %in% clean_omnipath_PKN$source | connectors_df$source %in% clean_omnipath_PKN$target),]
recon3D_connected <- as.data.frame(rbind(recon3D_bigg_no_cofactor,connectors_df))
write_csv(recon3D_connected, file = "results/recon3D_connected.csv")
library(readr)
library(metaboliteIDmapping)
### Import the high confidence interactions of STITCH
STITCH <- as.data.frame(read_delim("data/9606.actions.v5.0.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
STITCH <- STITCH[STITCH$mode == "activation" | STITCH$mode == "inhibition",]
####THIS SECTION TO REMOVE TEXTMINING, download this file from STITCHdb website
X9606_protein_chemical_links_detailed_v5_0 <- as.data.frame(read_delim("data/9606.protein_chemical.links.detailed.v5.0.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
threshold <- 700
not_text_mining <- X9606_protein_chemical_links_detailed_v5_0[X9606_protein_chemical_links_detailed_v5_0$combined_score >= threshold,]
rm(X9606_protein_chemical_links_detailed_v5_0)
not_text_mining <- not_text_mining[not_text_mining$experimental >= threshold | not_text_mining$database >= threshold,]
not_text_mining$ID <- paste(not_text_mining$chemical, not_text_mining$protein , sep = "_")
not_text_mining$ID_reverse <- paste(not_text_mining$protein, not_text_mining$chemical, sep = "_")
### We only care about allosteric interactions
STITCH <- STITCH[STITCH$a_is_acting,]
STITCH$ID <- paste(STITCH$item_id_a, STITCH$item_id_b, sep = "_")
STITCH <- STITCH[STITCH$ID %in% not_text_mining$ID | STITCH$ID %in% not_text_mining$ID_reverse,]
STITCH <- STITCH[,-7]
####END OF REMOVE TEXTMINING
### We need to map the Ensembl Ids to NCBI gene ids
## We make a vector of uniue ensembl IDs
prots <- unique(c(STITCH$item_id_a, STITCH$item_id_b))
prots <- prots[grepl("9606[.]ENSP", prots)]
## We remove the taxon ID so the IDs can be mapped
prots <- as.data.frame(cbind(prots, gsub("9606[.]","",prots)))
##We use biomart package to map the ensembl ids to NCBI ones
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "ensembl_peptide_id",
attributes = c("ensembl_peptide_id",'hgnc_symbol','entrezgene_id', "description"),
values = prots$V2, mart = ensembl)
names(G_list)[1] <- "V2"
## We put all the ID versions into one dataframe
prots <- merge(prots, G_list, by = "V2")
prots <- prots[prots$hgnc_symbol != "",]
## We create a named vector to make the id conversion more efficient
prots_vec <- prots$hgnc_symbol
names(prots_vec) <- prots$prots
## Ids are converted in the STITCH interaciton dataframe
for(i in 1:2)
{
for(j in 1:length(STITCH[,1]))
{
if(STITCH[j,i] %in% names(prots_vec))
{
STITCH[j,i] <- prots_vec[STITCH[j,i]]
}
else
{
STITCH[j,i] <- gsub("CID[a-z]0*","Metab__",STITCH[j,i])
}
}
}
### We converted the interactions of STITCH into a SIF format
STITCH$sign <- ifelse(STITCH$action == "inhibition", -1, 1)
STITCH <- STITCH[grepl("Metab__",STITCH$item_id_a),]
STITCH <- STITCH[,c(1,7,2)]
names(STITCH) <- c("source","sign","target")
CIDs <- unique(as.character(unlist(STITCH[,c(1,3)])))
CIDs <- CIDs[grepl("Metab__",CIDs)]
CIDs <- gsub("Metab__","",CIDs)
##Convert CID to HMDB Id when available
metabolitesMapping <- metabolitesMapping[which(metabolitesMapping$CID %in% CIDs),]
metabolitesMapping <- metabolitesMapping[!is.na(metabolitesMapping$HMDB),]
metabolitesMapping_vec <- paste("Metab__",metabolitesMapping$HMDB, sep = "")
names(metabolitesMapping_vec) <- paste("Metab__",metabolitesMapping$CID, sep ="")
for(i in c(1,3))
{
STITCH[,i] <- sapply(STITCH[,i], function(x, metabolitesMapping_vec)
{
if(x %in% names(metabolitesMapping_vec))
{
return(metabolitesMapping_vec[x])
} else
{
return(x)
}
}, simplify = T, metabolitesMapping_vec = metabolitesMapping_vec)
}
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
omni_proteins <- unique(as.character(unlist(clean_omnipath_PKN[,c(1,2)])))
STITCH <- STITCH[which(STITCH$target %in% omni_proteins),]
STITCH <- unique(STITCH)
STITCH$source <- paste(STITCH$source, "_c", sep = "")
STITCH <- STITCH[,c(1,3,2)]
### Save the SIF network as csv
write_csv(STITCH,"results/STITCH_filtered.csv")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
meta_PKN <- unique(meta_PKN)
save(meta_PKN, file = "results/meta_PKN.RData")
meta_network <- meta_PKN
meta_network <- meta_network[,c(1,3,2)]
names(meta_network) <- c("source", "interaction", "target")
# save(meta_PKN, file = "../cosmosR/data/meta_network.RData")
save(meta_PKN, file = "../cosmosR/data/meta_network.RData")
save(meta_PKN, file = "../cosmosR/data/meta_network.RData")
save(meta_PKN, file = "../cosmosR/data/meta_network.RData")
devtools::install_github("saezlab/cosmosR")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
meta_PKN <- unique(meta_PKN)
save(meta_PKN, file = "results/meta_PKN.RData")
meta_network <- meta_PKN
meta_network <- meta_network[,c(1,3,2)]
names(meta_network) <- c("source", "interaction", "target")
save(meta_network, file = "../cosmosR/data/meta_network.RData")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
meta_PKN <- unique(meta_PKN)
save(meta_PKN, file = "results/meta_PKN.RData")
meta_network <- meta_PKN
meta_network <- meta_network[,c(1,3,2)]
names(meta_network) <- c("source", "interaction", "target")
#probably erroneous interaction
meta_network <- meta_network[-which(meta_network$source == "PRKCA" & meta_network$target == "SRC"),]
#probably erroneous interaction
meta_network <- meta_network[-which(meta_network$source == "LTC4S"),] #I don't know where this interaction comes from, the sources are wrong (https://www.nature.com/articles/onc2008228)
meta_network <- meta_network[!(grepl("CAD_reverse",meta_network$source) | grepl("CAD_reverse",meta_network$target)) ,] #redHuman confirms that the reaction is actually not reversible
save(meta_network, file = "../cosmosR/data/meta_network.RData")
save(meta_network, file = "../cosmosR/data/meta_network.RData")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
meta_PKN <- unique(meta_PKN)
save(meta_PKN, file = "results/meta_PKN.RData")
meta_network <- meta_PKN
meta_network <- meta_network[,c(1,3,2)]
names(meta_network) <- c("source", "interaction", "target")
#probably erroneous interaction
meta_network <- meta_network[-which(meta_network$source == "PRKCA" & meta_network$target == "SRC"),]
#probably erroneous interaction
meta_network <- meta_network[-which(meta_network$source == "LTC4S"),] #I don't know where this interaction comes from, the sources are wrong (https://www.nature.com/articles/onc2008228)
meta_network <- meta_network[!(grepl("CAD_reverse",meta_network$source) | grepl("CAD_reverse",meta_network$target)) ,] #redHuman confirms that the reaction is actually not reversible
save(meta_network, file = "../cosmosR/data/meta_network.RData")
