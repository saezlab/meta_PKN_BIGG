ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
View(ttop_rna)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
View(meta_PKN)
View(meta_PKN)
library(readr)
library(stringr)
recon3D_bigg_no_cofactor <- as.data.frame(read_csv("data/recon3D_bigg_no_cofactor.csv"))
HMDB_full_mapping_long <- as.data.frame(
read_csv("support/HMDB_full_mapping_long.csv"))
HMDB_full_mapping_long_vec <- paste("Metab__",HMDB_full_mapping_long$good_HMDB_id,sep = "")
names(HMDB_full_mapping_long_vec) <- paste("Metab__",HMDB_full_mapping_long$legacy_HMDB_id,sep = "")
HMDB_full_mapping_long_vec <- c(HMDB_full_mapping_long_vec,"Metab__HC00342" = "Metab__HMDB0000072")
for(i in 1:2)
{
recon3D_bigg_no_cofactor[,i] <- sapply(recon3D_bigg_no_cofactor[,i], function(x,HMDB_full_mapping_long_vec){
suffixe <- str_extract(x, "_[a-z]$")
metab <- gsub("_[a-z]$","",x)
if(metab %in% names(HMDB_full_mapping_long_vec))
{
metab <- paste(HMDB_full_mapping_long_vec[metab],suffixe,sep = "")
return(metab)
}
return(x)
}, HMDB_full_mapping_long_vec = HMDB_full_mapping_long_vec)
}
###Build the connectors to omnipath
elements <- unique(as.character(unlist(recon3D_bigg_no_cofactor)))
elements <- elements[!grepl("Metab__",elements)]
elements <- elements[!grepl("__[0-9]",elements)]
connectors_list <- sapply(elements, function(x){
# prefixe <- gsub("__.*","",x)
# suffixe <- ifelse(grepl("_reverse$",x),"_reverse","")
genes <- gsub(".*__","",x)
genes <- gsub("_reverse$","",genes)
if(grepl("_",genes))
{
elements <- str_split(string = genes, pattern = "_")[[1]]
if(length(elements) < 10)
{
genes_connector_list <- sapply(elements,function(gene)
{
return(c(gene,x))
})
return(t(genes_connector_list))
}
} else
{
return(c(genes,x))
}
})
connectors_df <- as.data.frame(do.call(rbind,connectors_list))
names(connectors_df) <- c("source","target")
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
connectors_df <- connectors_df[which(connectors_df$source %in% clean_omnipath_PKN$source | connectors_df$source %in% clean_omnipath_PKN$target),]
recon3D_connected <- as.data.frame(rbind(recon3D_bigg_no_cofactor,connectors_df))
write_csv(recon3D_connected, file = "results/recon3D_connected.csv")
library(readr)
clean_omnipath_PKN <- as.data.frame(read_csv("results/clean_omnipath_PKN.csv"))
recon3D_connected <- as.data.frame(read_csv("results/recon3D_connected.csv"))
STITCH_filtered <- as.data.frame(read_csv("results/STITCH_filtered.csv"))
meta_PKN <- as.data.frame(rbind(clean_omnipath_PKN,STITCH_filtered))
recon3D_connected$sign <- 1
meta_PKN <- as.data.frame(rbind(meta_PKN, recon3D_connected))
meta_PKN[is.na(meta_PKN$source) | is.na(meta_PKN$target),]
save(meta_PKN, file = "results/meta_PKN.RData")
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
View(ttop_rna)
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
comp <- "_c"
metab_input_COSMOS_vec <- metab_input_COSMOS_vec[grepl(comp,names(metab_input_COSMOS_vec))]
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
my_options$timelimit <- 7200
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
library(OmnipathR)
library(org.Hs.eg.db)
library(readr)
full_pkn <- as.data.frame(import_all_interactions())
clean_PKN <- full_pkn[full_pkn$consensus_stimulation == 1 | full_pkn$consensus_inhibition == 1,]
clean_PKN <- clean_PKN[clean_PKN$dorothea_level %in% c("A","A;B","A;C","A;D","B","B;D","C","C;D") | is.na(clean_PKN$dorothea_level),]
clean_PKN$sign <- clean_PKN$is_stimulation - clean_PKN$consensus_inhibition
clean_PKN <- clean_PKN[,c(3,4,18)]
clean_PKN_supp <- clean_PKN[clean_PKN$sign == 0,]
clean_PKN_supp$sign <- -1
clean_PKN[clean_PKN$sign == 0,"sign"] <- 1
clean_PKN <- as.data.frame(rbind(clean_PKN, clean_PKN_supp))
names(clean_PKN) <- c("source","target","sign")
View(clean_PKN)
library(igraph)
myG <- graph_from_data_frame(clean_PKN[,c(1,2)])
shortest_paths(myG, from = "MTOR", to = "HIF1A")
shortest_paths(myG, from = "AKT1", to = "HIF1A")
shortest_paths(myG, from = "AKT1", to = "PAX5")
names(unlist(shortest_paths(myG, from = "AKT1", to = "PAX5"))
)
length(shortest_paths(myG, from = "AKT1", to = "PAX5"))
length(shortest_paths(myG, from = "MTOR", to = "HIF1A"))
length(unlist(shortest_paths(myG, from = "MTOR", to = "HIF1A")))
length(unlist(shortest_paths(myG, from = "AKT1", to = "PAX5")))
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
comp <- "_c"
metab_input_COSMOS_vec <- metab_input_COSMOS_vec[grepl(comp,names(metab_input_COSMOS_vec))]
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 8,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
my_options$timelimit <- 7200
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
comp <- "_c"
metab_input_COSMOS_vec <- metab_input_COSMOS_vec[grepl(comp,names(metab_input_COSMOS_vec))]
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 5,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
comp <- "_c"
metab_input_COSMOS_vec <- metab_input_COSMOS_vec[grepl(comp,names(metab_input_COSMOS_vec))]
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 4,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
library(OmnipathR)
library(org.Hs.eg.db)
library(readr)
full_pkn <- as.data.frame(import_all_interactions())
clean_PKN <- full_pkn[full_pkn$consensus_stimulation == 1 | full_pkn$consensus_inhibition == 1,]
clean_PKN <- clean_PKN[clean_PKN$dorothea_level %in% c("A","A;B","A;C","A;D","B","B;D","C","C;D") | is.na(clean_PKN$dorothea_level),]
clean_PKN$sign <- clean_PKN$is_stimulation - clean_PKN$consensus_inhibition
clean_PKN <- clean_PKN[,c(3,4,18)]
clean_PKN_supp <- clean_PKN[clean_PKN$sign == 0,]
clean_PKN_supp$sign <- -1
clean_PKN[clean_PKN$sign == 0,"sign"] <- 1
clean_PKN <- as.data.frame(rbind(clean_PKN, clean_PKN_supp))
names(clean_PKN) <- c("source","target","sign")
View(clean_PKN)
library(readr)
library(org.Hs.eg.db)
library(stringr)
library(cosmosR)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
metab_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/metab_ready.csv"))
signaling_input_COSMOS <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/signaling_ready.csv"))
ttop_rna <- as.data.frame(read_csv("data/cosmos_inputs_test/cosmos_paper/RNA_ttop_ready.csv"))
ttop_rna <- ttop_rna[complete.cases(ttop_rna),]
RNA_input <- ttop_rna[,"t"]
names(RNA_input) <- ttop_rna$ID
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
#Here the user should provide a path to its CPLEX executable (only cplex at the moment, other solvers will be documented soon !)
my_options$solverPath <- "~/Documents/cplex" #or cbc solver executable
my_options$solver <- "cplex" #or cbc
my_options$timelimit <- 1800
my_options$mipGAP <- 0.05
my_options$threads <- 6
metab_input_COSMOS_vec <- metab_input_COSMOS$t
names(metab_input_COSMOS_vec) <- metab_input_COSMOS$HMDB
signaling_input_COSMOS_vec <- signaling_input_COSMOS$NES
names(signaling_input_COSMOS_vec) <- signaling_input_COSMOS$ID
metab_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(metab_input_COSMOS_vec, meta_PKN)
signaling_input_COSMOS_vec <- cosmosR:::filter_input_nodes_not_in_pkn(signaling_input_COSMOS_vec, meta_PKN)
meta_PKN <- meta_PKN[,c(1,3,2)]
names(meta_PKN) <- c("source", "interaction", "target")
comp <- "_c"
metab_input_COSMOS_vec <- metab_input_COSMOS_vec[grepl(comp,names(metab_input_COSMOS_vec))]
test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = meta_PKN,
signaling_data = signaling_input_COSMOS_vec,
metabolic_data = metab_input_COSMOS_vec,
diff_expression_data = RNA_input,
maximum_network_depth = 5,
remove_unexpressed_nodes = T,
CARNIVAL_options = my_options
)
my_options$timelimit <- 7200
test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,
CARNIVAL_options = my_options)
View(test_result_for$weightedSIF)
load("~/Dropbox/meta_PKN_BIGG/results/meta_PKN.RData")
View(meta_PKN)
